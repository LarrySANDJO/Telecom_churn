import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import joblib
import plotly.graph_objects as go

def predictions_page(filtered_df):
    st.title("üîÆ pr√©dictions de churn")
    
    # Chargement du mod√®le ( contient d√©j√† le pipeline de traitement)
    model = joblib.load('dossier_app_streamlit/churn_model.joblib')
    pipeline = joblib.load('dossier_app_streamlit/preprocessor.joblib')
    
    # Premi√®re ligne de m√©triques
    col1, col2 = st.columns(2)

    # Filtrer uniquement les clients actifs (Churn Status == 0)
    active_clients = filtered_df[filtered_df['Churn Status'] == 0]
    active_count = active_clients.shape[0]
    
    with col1:
        # KPI: Taux de clients √† haut risque (probabilit√© > 0.7)
        high_risk = active_clients[active_clients['Churn_Probability'] > 0.7].shape[0]
        st.metric("Clients √† haut risque", f"{high_risk:,}({(high_risk / active_count * 100):.1f}%)")
       
        
    # Deuxi√®me ligne de graphiques
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Affichage du titre
        st.subheader("R√©partition des clients √† haut risque par segment")

        # Filtrer les clients √† haut risque
        high_risk_clients = active_clients[active_clients['Churn_Probability'] > 0.7]

        # Calculer la r√©partition des clients √† haut risque par segment
        high_risk_by_segment = high_risk_clients.groupby('Segment').size().reset_index(name='Count')

        # Calculer la contribution de chaque segment
        total_high_risk = high_risk_by_segment['Count'].sum()
        high_risk_by_segment['Contribution'] = (high_risk_by_segment['Count'] / total_high_risk) * 100

        # Trier les segments par contribution d√©croissante
        high_risk_by_segment = high_risk_by_segment.sort_values(by='Contribution', ascending=False)

        # Cr√©ation du graphique
        fig = px.bar(
            high_risk_by_segment,
            x='Segment',
            y='Contribution',
            title="R√©partition des clients √† haut risque par segment",
            color='Segment',
            color_discrete_map={
                '√âlev√©': 'green',
                'Moyen-Sup': 'blue',
                'Moyen-Inf': 'orange',
                'Bas': 'red'
            }
        )

        
        # Labels des pourcentages en gras sur les barres
        fig.update_traces(
            texttemplate='<b>%{y:.1%}</b>', 
            textposition='outside'
        )
        
        # Supprimer la l√©gende, le nom de l'axe des abscisses et les graduations sur l'axe des ordonn√©es
        fig.update_layout(
            yaxis_tickformat='.0%',
            showlegend=False,  # Suppression de la l√©gende
            xaxis=dict(
                title=None,  # Suppression du nom de l'axe des abscisses
                tickfont=dict(size=14, family="Arial Black")  # Mettre les modalit√©s en gras
            ),
            yaxis=dict(
                title='Pourcentage',
                title_font=dict(size=16, family='Arial', weight='bold'),  # Nom de l'axe en gras
                showticklabels=False  # Suppression des graduations de l'axe des ordonn√©es
            )
        )

        st.plotly_chart(fig, use_container_width=True)


    with col2:
        st.subheader("Taux de clients pr√©dits √† haut risque par segment")
        
        #  Nombre total de clients actifs par segment
        segment_total = active_clients['Segment'].value_counts().reset_index()
        segment_total.columns = ['Segment', 'Total']

        # Nombre de clients √† risque par segment (> 0.7)
        active_clients_pred = active_clients[active_clients['Churn_Probability'] > 0.7]
        segment_risk = active_clients_pred['Segment'].value_counts().reset_index()
        segment_risk.columns = ['Segment', '√Ä_Risque']

        # Fusionner les deux
        merged = pd.merge(segment_total, segment_risk, on='Segment', how='left')
        merged['√Ä_Risque'] = merged['√Ä_Risque'].fillna(0)

        # Calcul du pourcentage de clients √† risque dans chaque segment
        merged['% √† risque'] = (merged['√Ä_Risque'] / merged['Total']) * 100
        merged = merged.sort_values('% √† risque', ascending=False)
        
        fig = px.bar(
            merged,
            x='Segment',
            y='% √† risque',
            text=merged['% √† risque'].apply(lambda x: f'{x:.1f}%'),
            color='Segment',
            color_discrete_map={
                '√âlev√©': 'green',
                'Moyen-Sup': 'blue',
                'Moyen-Inf': 'orange',
                'Bas': 'red'
            }
        )

        fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
        # Supprimer la l√©gende, le nom de l'axe des abscisses et les graduations sur l'axe des ordonn√©es
        fig.update_layout(
            yaxis_tickformat='.0%',
            showlegend=False,  # Suppression de la l√©gende
            xaxis=dict(
                title=None,  # Suppression du nom de l'axe des abscisses
                tickfont=dict(size=14, family="Arial Black")  # Mettre les modalit√©s en gras
            ),
            yaxis=dict(
                title="Pourcentage", 
                title_font=dict(size=16, family='Arial', weight='bold'),  # Nom de l'axe en gras
                showticklabels=False  # Suppression des graduations de l'axe des ordonn√©es
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)



    with col3:
        st.subheader("Facteurs influents sur le churn")
        # Importances des variables (si disponible dans le mod√®le)
        try:
            # R√©cup√©rer les importances des features si disponibles
            if hasattr(model['classifier'], 'feature_importances_'):
                # Liste des noms de features (√† adapter selon votre mod√®le)
                feature_names = [
                    '√Çge r√©seau', 'Anciennet√© client', 'D√©penses totales', 
                    'D√©penses SMS', 'D√©penses data', 'Consommation data',
                    'Appels uniques', 'D√©penses Onnet', 'D√©penses Offnet', 
                    'Appels plaintes', 'Type r√©seau M1', 'Type r√©seau M2',
                    'R√©seau concurrent M1', 'R√©seau concurrent M2'
                ]
                
                importances = model['classifier'].feature_importances_
                
                # Ajuster selon le nombre r√©el
                if len(importances) < len(feature_names):
                    feature_names = feature_names[:len(importances)]
                elif len(importances) > len(feature_names):
                    importances = importances[:len(feature_names)]
                
                feature_imp = pd.DataFrame({'feature': feature_names, 'importance': importances})
                feature_imp['importance'] = feature_imp['importance'] * 100  
                feature_imp = feature_imp.sort_values('importance', ascending=False).head(10)
                
                # Graphique des importances
                fig = px.bar(
                    feature_imp, 
                    x='importance', 
                    y='feature', 
                    orientation='h',
                    text='importance'  # Afficher les valeurs d'importance sur les barres
                )
                
                # Personnalisation du graphique
                fig.update_traces(
                    texttemplate='<b>%{text:.1f}%</b>',  # Afficher les importances sur les barres avec 2 d√©cimales
                    textposition='outside',  # Positionner les valeurs √† l'int√©rieur des barres
                )
                
                # Mise en forme du graphique
                fig.update_layout(
                    xaxis=dict(
                        title_font=dict(size=16, family='Arial', weight='bold'),  # Nom de l'axe en gras
                        showticklabels=False  # Enlever les graduations sur l'axe des abscisses
                    ),
                    yaxis=dict(
                        title=None, 
                        tickfont=dict(size=14, family="Arial", weight="bold")  # Mettre les modalit√©s en gras sur l'axe des ordonn√©es
                    ),
                    showlegend=False  # Enlever la l√©gende
                )

                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Informations d'importance des variables non disponibles pour ce mod√®le")
        except Exception as e:
            st.error(f"Erreur lors de l'affichage des importances: {str(e)}")

    
    # Section de pr√©diction (pleine largeur)
    st.header("Pr√©dictions")
    
    # Section des variables √† entrer
    with st.expander("Veuillez saisir les donn√©es", expanded=True):
        # Organiser les variables en 3 colonnes
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Variables quantitatives - premi√®re colonne
            network_age = st.number_input(
                "√Çge du r√©seau (mois)", 
                min_value=0, 
                max_value=240, 
                help="Dur√©e sur le r√©seau (en mois)"
            )
            
            tenure = st.number_input( 
                "Anciennet√© client (mois)", 
                min_value=0, 
                help="Anciennet√© chez l'op√©rateur (mois)"
            )
            
            total_spend = st.number_input(
                "D√©penses totales (mois 1 et 2)", 
                min_value=0.0, 
                help="Total total des mois 1 et 2"
            )
            
            network_type_month1 = st.selectbox(
                "Type de r√©seau (mois 1)",
                options=["2G", "3G", "Other"],
                index=2,
                help="Type de r√©seau souscrit au mois 1"
            )
        
        with col2:
            # Variables quantitatives 
            sms_spend = st.number_input(
                "D√©penses SMS", 
                min_value=0.0, 
                help="Total des d√©penses en SMS"
            )
            
            data_spend = st.number_input(
                "D√©penses data", 
                min_value=0.0, 
                help="Total des d√©penses en data"
            )
            
            data_consumption = st.number_input(
                "Consommation data (Mo)", 
                min_value=0.0, 
                help="Volume total de donn√©es consomm√©es en Mo"
            )
            
            network_type_month2 = st.selectbox(
                "Type de r√©seau (mois 2)",
                options=["2G", "3G", "Other"],
                index=2,
                help="Type de r√©seau souscrit pour le mois 2"
            )
        
        with col3:
            # Variables quantitatives 
            unique_calls = st.number_input(
                "Appels uniques", 
                min_value=0, 
                help="Nombre total d'appels uniques"
            )
            
            onnet_spend = st.number_input(
                "D√©penses Onnet", 
                min_value=0.0, 
                help="D√©penses pour appels vers le m√™me r√©seau"
            )
            
            offnet_spend = st.number_input(
                "D√©penses Offnet", 
                min_value=0.0, 
                help="D√©penses pour appels vers d'autres r√©seaux"
            )
            
            complaint_calls = st.number_input(
                "Appels centre d'appels", 
                min_value=0, 
                help="Nombre d'appels pour des plaintes"
            )
        
        # Variables cat√©gorielles pour les r√©seaux concurrents
        col1, col2 = st.columns(2)
        
        with col1:
            competitor_month1 = st.selectbox(
                "R√©seau concurrent pr√©f√©r√© (Mois 1)",
                options=["Uxaa", "Weematel", "Zintel", "Mango", "ToCall", "PQza", "Aucun"],
                index=6,
                help="R√©seau concurrent le plus appr√©ci√© au mois 1"
            )
        
        with col2:
            competitor_month2 = st.selectbox(
                "R√©seau concurrent pr√©f√©r√© (Mois 2)",
                options=["Mango", "PQza", "ToCall", "Uxaa", "Weematel", "Zintel", "Aucun"],
                index=6,
                help="R√©seau concurrent le plus appr√©ci√© au mois 2"
            )
    
    # Section des r√©sultats de pr√©diction
    with st.container():
        st.subheader("Pr√©diction de churn")
        
        # Bouton pour d√©clencher la pr√©diction
        if st.button("Pr√©dire le risque de churn", use_container_width=True):
            # Pr√©paration des donn√©es pour la pr√©diction
            new_data = pd.DataFrame({
                'network_age': [network_age],
                'Customer tenure in month': [tenure],
                'Total Spend in Months 1 and 2 of 2017': [total_spend],
                'Total SMS Spend': [sms_spend],
                'Total Data Spend': [data_spend],
                'Total Data Consumption': [data_consumption],
                'Total Unique Calls': [unique_calls],
                'Total Onnet spend': [onnet_spend],
                'Total Offnet spend': [offnet_spend],
                'Total Call centre complaint calls': [complaint_calls],
                'Network type subscription in Month 1': [network_type_month1],
                'Network type subscription in Month 2': [network_type_month2],
                'Most Loved Competitor network in in Month 1': [competitor_month1],
                'Most Loved Competitor network in in Month 2': [competitor_month2]
            })
            
            # Appliquer le pipeline pour transformer les nouvelles donn√©es
            #new_data_transformed = pipeline.transform(new_data)

            
            # Faire la pr√©diction
            # Transformer les donn√©es avec le pipeline
            #new_data_transformed = pipeline.transform(new_data)

            # Pr√©dire avec le mod√®le
            # prediction = model.predict(new_data_transformed)
            try:
                # Pr√©diction de la probabilit√©
                proba = model.predict_proba(new_data)[:, 1][0]
                prediction = model.predict(new_data)[0]
                
                # D√©terminer les couleurs et messages selon la gravit√©
                if proba < 0.3:
                    color = "green"
                    risk_level = "‚úÖFaible"
                elif proba < 0.5:
                    color = "orange"
                    risk_level = "üìäMoyen"
                elif proba < 0.7:
                    color = "darkorange"
                    risk_level = "‚ö†Ô∏è√âlev√©"
                else:
                    color = "red"
                    risk_level = "üö®Critique"
                
                # Affichage des r√©sultats 
                col1, col2 = st.columns(2)
                
                with col1:
                    # Probabilit√© et niveau de risque
                    st.markdown(f"""
                    <div style="padding: 20px; border-radius: 10px; background-color: {color}25; border: 1px solid {color};">
                        <h3 style="color: {color}; margin-bottom: 10px;">Risque de churn: {risk_level}</h3>
                        <p style="font-size: 24px; font-weight: bold;">Probabilit√©: {proba*100:.1f}%</p>
                        <p>Statut: {"√Ä risque" if prediction == 1 else "Stable"}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    # Jauge visuelle
                    fig = go.Figure(go.Indicator(
                        mode="gauge+number",
                        value=proba*100,
                        domain={'x': [0, 1], 'y': [0, 1]},
                        title={'text': "Risque de Churn (%)"},
                        gauge={
                            'axis': {'range': [0, 100]},
                            'bar': {'color': color},
                            'steps': [
                                {'range': [0, 30], 'color': "lightgreen"},
                                {'range': [30, 50], 'color': "lightyellow"},
                                {'range': [50, 70], 'color': "orange"},
                                {'range': [70, 100], 'color': "salmon"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': 50
                            }
                        }
                    ))
                    fig.update_layout(height=250)
                    st.plotly_chart(fig, use_container_width=True)
                
                # Recommandations bas√©es sur le niveau de risque
                st.subheader("üì¢ Recommandations")
                if proba < 0.3:
                    st.success("‚úÖClient stable. Continuez √† suivre l'√©volution de sa consommation.")
                elif proba < 0.5:
                    st.info("üìäRisque de churn mod√©r√©. Envisagez des offres promotionnelles cibl√©es.")
                elif proba < 0.7:
                    st.warning("‚ö†Ô∏èRisque de churn √©lev√©. Contactez le client pour comprendre ses besoins.")
                else:
                    st.error("üö®Risque de churn critique. Intervention urgente requise. Proposez des offres de fid√©lisation personnalis√©es.")
                
            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction: {str(e)}")
                st.write("Veuillez v√©rifier que les entr√©es correspondent aux attentes du mod√®le.")


    # Prediction dans le cas de donn√©es dans un fichier excel
    # Chargement et affichage du fichier Excel ou CSV
    uploaded_file = st.file_uploader("Importer un fichier Excel ou CSV", type=["xlsx", "csv"], key="file_upload")
    if uploaded_file is not None:
        if uploaded_file.name.endswith(".csv"):
            new_data = pd.read_csv(uploaded_file)
        else:
            new_data = pd.read_excel(uploaded_file)
        
        st.write("### Aper√ßu des donn√©es import√©es")
        st.dataframe(new_data.head())
        
        # Appliquer la transformation avec le pipeline
        new_data_transformed = pipeline.transform(new_data)

        try:
            # Pr√©diction de la probabilit√©
            proba = model.predict_proba(new_data)[:, 1]
            prediction = model.predict(new_data)
            
            # Ajout des pr√©dictions aux donn√©es
            new_data['Churn_Probability'] = proba
            new_data['Churn_Prediction'] = prediction
            
            # Boutons pour voir ou exporter les r√©sultats
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üëÅ Voir les r√©sultats"):
                    st.write("### R√©sultats des pr√©dictions")
                    st.dataframe(new_data[['Customer ID', 'Churn_Probability', 'Churn_Prediction']])
            
            with col2:
                output_file = "predictions.csv"
                new_data.to_csv(output_file, index=False)
                with open(output_file, "rb") as file:
                    st.download_button(
                        label="üì• T√©l√©charger les pr√©dictions",
                        data=file,
                        file_name="predictions.csv",
                        mime="text/csv"
                    )
            
        except Exception as e:
            st.error(f"Erreur lors de la pr√©diction : {e}")